require('dotenv').config();
const { VK, Keyboard, Carousel, CarouselElement } = require('vk-io');

const vk = new VK({
    token: process.env.VK_TOKEN,
    webhookSecret: process.env.VK_SECRET,
});

exports.handler = async (event) => {
    const body = JSON.parse(event.body);
    const { type, group_id, secret } = body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ ID –≥—Ä—É–ø–ø—ã
    if (secret !== process.env.VK_SECRET || group_id !== parseInt(process.env.VK_GROUP_ID, 10)) {
        return { statusCode: 403, body: 'Forbidden' };
    }

    if (type === 'confirmation') {
        return { statusCode: 200, body: process.env.VK_CONFIRMATION };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    await vk.updates.handleWebhookUpdate(body);
    return { statusCode: 200, body: 'OK' };
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const createButton = (label, color, payload = null) => Keyboard.textButton({ label, color, payload });
const createKeyboard = (buttons) => Keyboard.keyboard(buttons).oneTime();

// –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—É—Å–µ–ª–∏
const excursions = [
    {
        title: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –î–∞–≥–µ—Å—Ç–∞–Ω–æ–º',
        description: '–í–∏–∑–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –î–∞–≥–µ—Å—Ç–∞–Ω–∞. –°—é–¥–∞ –µ–¥–µ–º –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º!',
        photo_id: 'photo-226855768_457239020',
        action: 'choose_1'
    },
    {
        title: '–î—Ä–µ–≤–Ω–∏–π –î–µ—Ä–±–µ–Ω—Ç',
        description: '–°–∞–º—ã–π –¥—Ä–µ–≤–Ω–∏–π –≥–æ—Ä–æ–¥ –†–æ—Å—Å–∏–∏. –ü—Ä–∏–∫–æ—Å–Ω–∏—Ç–µ—Å—å –∫ –∞–Ω—Ç–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏!',
        photo_id: 'photo-226855768_457239021',
        action: 'choose_2'
    },
    {
        title: '5 –∂–µ–º—á—É–∂–∏–Ω –î–∞–≥–µ—Å—Ç–∞–Ω–∞',
        description: '–≠—Ç–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –º–µ—Å—Ç–∞ —Å–ø—Ä—è—Ç–∞–Ω—ã –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –î–∞–≥–µ—Å—Ç–∞–Ω–∞. –û–Ω–∏ –∂–¥—É—Ç –≤–∞—à–∏—Ö –≥–ª–∞–∑!',
        photo_id: 'photo-226855768_457239022',
        action: 'choose_3'
    }
];

const createCarousel = () => {
    return new Carousel(excursions.map(exc => new CarouselElement({
        title: exc.title,
        description: exc.description,
        photo_id: exc.photo_id,
        buttons: [
            createButton('üëâ–≤—ã–±—Ä–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é‚ú®', Keyboard.POSITIVE_COLOR, JSON.stringify({ action: exc.action })),
            createButton('‚Ü© –ù–∞–∑–∞–¥', Keyboard.PRIMARY_COLOR, JSON.stringify({ action: 'back' }))
        ]
    })));
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π VK
vk.updates.on('message_new', async (context) => {
    try {
        const text = context.text.trim().toLowerCase();
        const payload = context.message.payload ? JSON.parse(context.message.payload) : null;

        if (['–ø—Ä–∏–≤–µ—Ç', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞–ª–æ'].includes(text)) {
            await context.send({
                message: `–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫!üëã\n\n–Ø ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥. –ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä, –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ñ–æ—Ä–º–ª—é –∑–∞—è–≤–∫—É.\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å—é–¥–∞! üòä`,
                keyboard: createKeyboard([
                    [createButton('\u{1F4DA} –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', Keyboard.POSITIVE_COLOR)],
                    [createButton('\u{1F4C5} –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã', Keyboard.PRIMARY_COLOR)],
                    [createButton('\u{2753} –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', Keyboard.NEGATIVE_COLOR)]
                ])
            });
        } else if (text === '\u{1F4D6} –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ') {
            await context.send({
                message: `–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç—É—Ä–æ–≤. –£ –Ω–∞—Å –µ—Å—Ç—å:\n\n\u{1F31F} –≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ 1 –¥–µ–Ω—å ‚Äî —è—Ä–∫–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.\n\u{2728} –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä—ã ‚Äî –æ—Ç–¥—ã—Ö –¥—É—à–æ–π –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø—Ä–∏—Ä–æ–¥–æ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª!`,
                keyboard: createKeyboard([
                    [createButton('\u{1F31F} –≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ 1 –¥–µ–Ω—å', Keyboard.POSITIVE_COLOR)],
                    [createButton('\u{2728} –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä—ã', Keyboard.POSITIVE_COLOR)],
                    [createButton('–ù–∞–∑–∞–¥', Keyboard.PRIMARY_COLOR)]
                ])
            });
        } else if (text === '\u{1F31F} –≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ 1 –¥–µ–Ω—å') {
            await context.send({
                message: `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —ç–∫—Å–∫—É—Ä—Å–∏—é! üåü\n\n–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –î–∞–≥–µ—Å—Ç–∞–Ω–æ–º –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å. –û—Ç–∫—Ä–æ–π—Ç–µ —ç–∫—Å–∫—É—Ä—Å–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!`,
                keyboard: createKeyboard([[createButton('–ù–∞–∑–∞–¥', Keyboard.PRIMARY_COLOR)]]),
                attachment: createCarousel()
            });
        } else if (payload && payload.action && payload.action.startsWith('choose_')) {
            const excursionNumber = payload.action.split('_')[1];
            await context.send(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —ç–∫—Å–∫—É—Ä—Å–∏—é ${excursionNumber}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.`);
        } else if (payload && payload.action === 'back') {
            await context.send({
                message: `–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫!üëã –Ø ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`,
                keyboard: createKeyboard([
                    [createButton('\u{1F4D6} –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', Keyboard.POSITIVE_COLOR)],
                    [createButton('\u{1F4C5} –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã', Keyboard.PRIMARY_COLOR)],
                    [createButton('\u{2753} –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', Keyboard.NEGATIVE_COLOR)]
                ])
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
});
