require('dotenv').config();
const { VK } = require('vk-io');

const vk = new VK({
    token: process.env.VK_TOKEN,
    webhookSecret: process.env.VK_SECRET,
});

exports.handler = async (event, context) => {
    const body = JSON.parse(event.body);
    const { type, group_id, secret } = body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ ID –≥—Ä—É–ø–ø—ã
    if (secret !== process.env.VK_SECRET || group_id !== parseInt(process.env.VK_GROUP_ID, 10)) {
        return {
            statusCode: 403,
            body: 'Forbidden',
        };
    }

    if (type === 'confirmation') {
        return {
            statusCode: 200,
            body: process.env.VK_CONFIRMATION,
        };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await vk.updates.handleWebhookUpdate(body);

    return {
        statusCode: 200,
        body: 'OK',
    };
};

vk.updates.on('message_new', async (context) => {
    const message = context.text.toLowerCase();

    if (['–ø—Ä–∏–≤–µ—Ç', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞–ª–æ'].includes(message)) {
        await context.send({
            message: "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫! üëã\n\n–Ø ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥. –ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä, –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ñ–æ—Ä–º–ª—é –∑–∞—è–≤–∫—É.\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ.\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å—é–¥–∞, –∏ —è –æ—Ç–≤–µ—á—É! üòä",
            keyboard: Keyboard.keyboard([
                [
                    Keyboard.textButton({
                        label: 'üìú –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                        color: Keyboard.POSITIVE_COLOR
                    })
                ],
                [
                    Keyboard.textButton({
                        label: 'üóìÔ∏è –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã',
                        color: Keyboard.PRIMARY_COLOR
                    })
                ],
                [
                    Keyboard.textButton({
                        label: 'üí¨ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
                        color: Keyboard.NEGATIVE_COLOR
                    })
                ]
            ]).oneTime()
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
vk.updates.on('message_new', async (context) => {
    const text = context.text;

    switch (text) {
        case 'üìú –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ':
            await context.send("üìú –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∏ –æ–ø—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è>");
            break;
        case 'üóìÔ∏è –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã':
            await context.send("üóìÔ∏è –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏ —Ü–µ–Ω—ã: <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è>");
            break;
        case 'üí¨ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
            await context.send("üí¨ –í–æ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã: <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è>");
            break;
        default:
            if (!['–ø—Ä–∏–≤–µ—Ç', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞–ª–æ'].includes(text.toLowerCase())) {
                await context.send("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üòä");
            }
    }
});

