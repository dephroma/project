require('dotenv').config();
const { VK, Keyboard } = require('vk-io');
const he = require('he');

const vk = new VK({
    token: process.env.VK_TOKEN,
    webhookSecret: process.env.VK_SECRET,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendWelcomeMessage(context) {
    await context.send({
        message: "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫! üëã\n\n–Ø ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥. –ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä, –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ñ–æ—Ä–º–ª—é –∑–∞—è–≤–∫—É.\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ.\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å—é–¥–∞, –∏ —è –æ—Ç–≤–µ—á—É! üòä",
        keyboard: Keyboard.keyboard([
            [
                Keyboard.textButton({
                    label: '&#128220; –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                    color: Keyboard.POSITIVE_COLOR,
                    payload: JSON.stringify({ button: 'catalog' })
                })
            ],
            [
                Keyboard.textButton({
                    label: 'üóìÔ∏è –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã',
                    color: Keyboard.PRIMARY_COLOR,
                    payload: JSON.stringify({ button: 'dates' })
                })
            ],
            [
                Keyboard.textButton({
                    label: 'üí¨ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
                    color: Keyboard.NEGATIVE_COLOR,
                    payload: JSON.stringify({ button: 'faq' })
                })
            ]
        ]).oneTime()
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
async function sendCatalogMessage(context) {
    await context.send({
        message: "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç—É—Ä–æ–≤. –£ –Ω–∞—Å –µ—Å—Ç—å:\nüåü –≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ 1 –¥–µ–Ω—å ‚Äî –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∏—Ç—å —Å–µ–±–µ —è—Ä–∫–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ—Å–ø—É–±–ª–∏–∫–æ–π –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.\nüèûÔ∏è –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä—ã ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –¥—É—à–æ–π, –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ø—Ä–∏—Ä–æ–¥–æ–π –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è —Å–µ–±—è –≤–µ—Å—å –∫–æ–ª–æ—Ä–∏—Ç —Ä–µ–≥–∏–æ–Ω–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ä—à—Ä—É—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É!",
        keyboard: Keyboard.keyboard([
            [
                Keyboard.textButton({
                    label: 'üåü –≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ 1 –¥–µ–Ω—å',
                    color: Keyboard.POSITIVE_COLOR
                })
            ],
            [
                Keyboard.textButton({
                    label: 'üõèÔ∏è –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä—ã',
                    color: Keyboard.POSITIVE_COLOR
                })
            ],
            [
                Keyboard.textButton({
                    label: '‚Ü© –ù–∞–∑–∞–¥',
                    color: Keyboard.PRIMARY_COLOR,
                    payload: JSON.stringify({ button: 'back' })
                })
            ]
        ]).oneTime()
    });
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
vk.updates.on('message_new', async (context) => {
    const message = he.decode(context.text.trim()).toLowerCase();
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);

    if (['–ø—Ä–∏–≤–µ—Ç', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞–ª–æ'].includes(message)) {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
        await sendWelcomeMessage(context);
        return;
    }

    let payload;
    try {
        if (context.payload) {
            // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            const decodedPayload = he.decode(context.payload);
            payload = JSON.parse(decodedPayload);
            console.log('Payload:', payload);
        }
    } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ payload:', e);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    if (payload && payload.button === 'catalog') {
        await sendCatalogMessage(context);
    } else if (payload && payload.button === 'dates') {
        await context.send("üóìÔ∏è –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏ —Ü–µ–Ω—ã: <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è>");
    } else if (payload && payload.button === 'faq') {
        await context.send("üí¨ –í–æ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã: <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è>");
    } else if (payload && payload.button === 'back') {
        await sendWelcomeMessage(context);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
exports.handler = async (event, context) => {
    const body = JSON.parse(event.body);
    const { type, group_id, secret } = body;

    if (secret !== process.env.VK_SECRET || group_id !== parseInt(process.env.VK_GROUP_ID, 10)) {
        return {
            statusCode: 403,
            body: 'Forbidden',
        };
    }

    if (type === 'confirmation') {
        return {
            statusCode: 200,
            body: process.env.VK_CONFIRMATION,
        };
    }

    await vk.updates.handleWebhookUpdate(body);

    return {
        statusCode: 200,
        body: 'OK',
    };
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
vk.updates.startPolling