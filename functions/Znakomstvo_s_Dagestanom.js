require('dotenv').config();    //–∑–∞–ø—É—Å–∫–∞–µ–º—ã–π —Ñ–∞–π–ª –±–µ–∑ –æ—à–∏–±–æ–∫, —Ä–∞–±–æ—á–∏–π
const { VK, Keyboard } = require('vk-io');

const vk = new VK({
    token: process.env.VK_TOKEN,
    webhookSecret: process.env.VK_SECRET,

});

exports.handler = async (event, context) => {
    const body = JSON.parse(event.body);
    const { type, group_id, secret } = body;

    if (secret !== process.env.VK_SECRET || group_id !== parseInt(process.env.VK_GROUP_ID, 10)) {
        return {
            statusCode: 403,
            body: 'Forbidden',
        };
    }

    if (type === 'confirmation') {
        return {
            statusCode: 200,
            body: process.env.VK_CONFIRMATION,
        };
    }

    await vk.updates.handleWebhookUpdate(body);

    return {
        statusCode: 200,
        body: 'OK',
    };
};
const handled = await handleText(context, text);
vk.updates.on('message_new', async (context) => {
    const text = context.text.trim().toLowerCase();
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        if (handled) return; // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        const { handleText } = require('./responses');
        //–û—Å—Ç–∞–≤–∏–ª –ø–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ —ç—Ç–æ, —Ç—É–ø–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª –∏–∑ index, —á—Ç–æ–±—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫. –ö—Ä–æ–º–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, –∫–æ–Ω–µ—á–Ω–æ
    if (['–±–∏–±–∞', '—Ö—É–π', '–≥–æ—Ä–æ—Ö', 'bye'].includes(text)) {
        await context.send({
            message: "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π üëãüëãüëãBIBAAAAAAAAAAAAAAAAA!üëãüëãüëã\n\n–Ø ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥. –ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä, –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ñ–æ—Ä–º–ª—é –∑–∞—è–≤–∫—É.\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å—é–¥–∞, –∏ —è –æ—Ç–≤–µ—á—É! üòä",
            keyboard: Keyboard.keyboard([
                [Keyboard.textButton({ label: '\u{1f4da} –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', color: Keyboard.POSITIVE_COLOR })],
                [Keyboard.textButton({ label: '\u{1f5d3} –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã', color: Keyboard.PRIMARY_COLOR })],
                [Keyboard.textButton({ label: '\u{1f4ac} –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', color: Keyboard.NEGATIVE_COLOR })],
            ]).oneTime(),
        });
    } 
    
    else {
        await context.send('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
});

